plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of SwissBankNotes data set")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
isFake = SwissBankNotes$is.fake
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of all notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
currPCAData = pcaNotes$x[,1:2]
isFake = SwissBankNotes$is.fake
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of all notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
currPCAData = pcaNotes$x[1:100,1:2]
isFake = SwissBankNotes$is.fake[1:100]
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of genuine notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
currPCAData = pcaNotes$x[101:200,1:2]
isFake = SwissBankNotes$is.fake[101:200]
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of counterfeit notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
rm(list = ls())
setwd("~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3")
load("./primate.scpulae.rdata")
library("cluster")
summary(primate.scapulae)
View(primate.scapulae)
View(primate.scapulae)
d = dist(primate.scapulae[1:9])
dim(as.matrix(d))
hc = hclust(d, method = "complete")
hc
hc$labels
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "single")
hc$labels
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "average")
hc$labels
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
cutTreeDt =(cutree(hc, k = 7))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
rm(list = ls())
getwd()
setwd("/Users/varadtupe/Documents/GitHub/CSE587_DIC/lab1/finalLab1/")
load("./data/Part3_2.RData")
library(ggmap)
library(twitteR)
setup_twitter_oauth("xxnT9Yq3j6YvATGT04E0C8ASH", "lVM3BFFTT8i1qjQhX9FM2CKdum6h8iVrCcZfqWntTk02oWm08M","57972043-A4xUZwhzLY9hCgwTRRYN2yytdRcTfayjQwELg8blm","NNivHGb0hEPjNCWwSogIUGSQ3SNPeLGnbL4gbyrxAhbE3")
ggplot(final, aes(map_id = final$statename)) +
geom_map(aes(fill = final$Lvl),color = "black", map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
scale_fill_manual(values = c( "High" = "red",
"Moderate" = "orange",
"Low"="yellow",
"Minimal"='#99ff33',
"Insufficient data" = "white"),
#labels=c("High",  "Moderate","Low","Minimal", "Insufficient data"), drop = FALSE)+
labels=c("Minimal","Low","Moderate","High","Insufficient data"), drop = FALSE)+
coord_map("bonne", lat0 = 20)+labs(fill= "",
title="Influenza based tweets collected during Feb 2018",x="",y="")+
theme(panel.grid=element_blank())
library(maps)
library(mapproj)
library(fiftystater)
ggplot(final, aes(map_id = final$statename)) +
geom_map(aes(fill = final$Lvl),color = "black", map = fifty_states) +
expand_limits(x = fifty_states$long, y = fifty_states$lat) +
scale_fill_manual(values = c( "High" = "red",
"Moderate" = "orange",
"Low"="yellow",
"Minimal"='#99ff33',
"Insufficient data" = "white"),
#labels=c("High",  "Moderate","Low","Minimal", "Insufficient data"), drop = FALSE)+
labels=c("Minimal","Low","Moderate","High","Insufficient data"), drop = FALSE)+
coord_map("bonne", lat0 = 20)+labs(fill= "",
title="Influenza based tweets collected during Feb 2018",x="",y="")+
theme(panel.grid=element_blank())
View(filteredData)
View(filteredData)
rm(list = ls())
setwd("~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3")
load("./primate.scpulae.rdata")
library("cluster")
summary(primate.scapulae)
d = dist(primate.scapulae[1:9])
dim(as.matrix(d))
hc = hclust(d, method = "complete")
summary(primate.scapulae)
d = dist(primate.scapulae[1:9])
dim(as.matrix(d))
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "single")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "single")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
sq = seq(1, len(primate.scapulae$genus))
sq = seq(1, length(primate.scapulae$genus))
sq
nrow(primate.scapulae$genus)
nrows(primate.scapulae$genus)
round(length(primate.scapulae$genus)*.8)
length(primate.scapulae$genus)
sq = seq(1, length(primate.scapulae$genus),round(length(primate.scapulae$genus)*.8))
sq
sq = seq(from = 1,to = length(primate.scapulae$genus),length.out = round(length(primate.scapulae$genus)*.8))
sq
sq = seq(from = 1,to = length(primate.scapulae$genus),by = round(length(primate.scapulae$genus)*.8))
sq
sq = sample(1:length(primate.scapulae$genus),round(length(primate.scapulae$genus)*.8))
sq
train = primate.scapulae[sq,]
test = train = primate.scapulae[-sq,]
k = knn(train,test,k=3)
require("knn")
knn(train,test,k=3)
?knn
require("class")
source('~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3/Q2.R', echo=TRUE)
knn(train,test,k=3)
train
test
is.na(primate.scapulae$gamma)
avg(primate.scapulae$gamma)
sum(primate.scapulae$gamma)
average(primate.scapulae$gamma)
mean(primate.scapulae$gamma)
mean(primate.scapulae$gamma)
summary(primate.scapulae)
primate.scapulae$gamma[is.na(primate.scapulae$gamma)]
primate.scapulae$gamma[is.na(primate.scapulae$gamma)] = 59.11
primate.scapulae$gamma
d = dist(primate.scapulae[1:9])
dim(as.matrix(d))
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "single")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 6))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
sq = sample(1:length(primate.scapulae$genus),round(length(primate.scapulae$genus)*.8))
train = primate.scapulae[sq,]
test = train = primate.scapulae[-sq,]
knn(train,test,k=3)
?knn
train = primate.scapulae[sq,]
train = primate.scapulae[sq,]
test = train = primate.scapulae[-sq,]
knn(train,test,k=3)
train = primate.scapulae[sq,c(1:9,11)]
test = train = primate.scapulae[-sq,c(1:9,11)]
knn(train,test,cl=10,k=3)
train
test
knn(train,test,cl="classdigit",k=3)
rm(list = ls())
setwd("~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3")
load("./primate.scpulae.rdata")
library("cluster")
require("class")
summary(primate.scapulae)
primate.scapulae$gamma[is.na(primate.scapulae$gamma)] = 59.11
mean(primate.scapulae$gamma)
d = dist(primate.scapulae[1:9])
dim(as.matrix(d))
# Complete Linkage
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
# Single Linkage
hc = hclust(d, method = "single")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
# Average Linkage
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
km = kmeans(d,5)
km$cluster
table(km$cluster,primate.scapulae$classdigit)
library(kohonen)
install.packages(kohonen)
install.packages("kohonen")
library(kohonen)
nciData = nci
nciData = data(nci)
data(nci)
library(ElemStatLearn)
nciData = data(nci)
rm(list = ls())
setwd("~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3")
install.packages("kohonen")
library(kohonen)
library(ElemStatLearn)
nciData = data(nci)
data(nci)
nci
nciData
nciScaledData<-scale(nci)
nciScaledData = scale(nci)
names(wines.scaled) <- names(wines)
kmen = kmeans(nciScaledData,2)
kmen$cluster
nciKm = kmeans(nciScaledData,2)
nciKm$cluster
nciSom <- som(data = wines.scaled, grid = somgrid(5,5,"hexagonal"))
nciSom <- som(data = nciScaledData, grid = somgrid(5,5,"hexagonal"))
nciSom <- som(data = nciScaledData, grid = somgrid(5,5,"hexagonal"))
install.packages("phyclust")
library(phyclust)
nciSom <- som(data = nciScaledData, grid = somgrid(5,5,"hexagonal"))
nciSom <- som(data = nciScaledData, grid = somgrid(5,5,"hexagonal"))
nciSom <- som(data = nciScaledData, grid = somgrid(5,5,"hexagonal"))
nciSom <- som(data = nciScaledData, grid = somgrid(5,2,"hexagonal"))
nciScaledData
nciSom <- som(data = as.matrix(nciScaledData), grid = somgrid(5,2,"hexagonal"))
nciSom <- som(X = as.matrix(nciScaledData), grid = somgrid(5,2,"hexagonal"))
nciSom
nciSom <- som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"))
simlarClust = data.frame()
simlarClust = data.frame("kMeansK","somRad","similarity")
simlarClust
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
simlarClust
for(i in c(1:4)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
store.simlar.2<-c(store.simlar.2,simlar.2)
}
somRadius = c(0.1,0.4,0.8,2)
kMeansK = c(2,5,10,20)
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
for(i in c(1:4)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
store.simlar.2<-c(store.simlar.2,simlar.2)
}
simlarClust
simlarClust
somRadius = c(0.1,0.4,0.8,2)
kMeansK = c(2,5,10,20)
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
for(i in c(1:4)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
}
simlarClust
simlarClust[1] = NULL
simlarClust
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
for(i in c(1:4)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
}
simlarClust
somRadius = c(0.1,0.4,0.8,2,4)
kMeansK = c(2,5,10,20)
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
for(i in c(1:5)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
}
#Ignore the first record
simlarClust
plot(simlarClust$kMeansK,simlarClust$somRad,col=simlarClust$similarity)
plot(simlarClust$kMeansK,simlarClust$somRad)
somRadius = c(0.1,0.4,0.8,2,4,10)
kMeansK = c(2,5,10,20)
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
for(i in c(1:6)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
}
simlarClust
somRadius[i]
somRadius[i-1]
plot(simlarClust$kMeansK,simlarClust$somRad)
rm(list = ls())
setwd("~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3")
load("./SwissBankNotes.rdata")
summary(SwissBankNotes)
SwissBankNotes$is.fake = 1
SwissBankNotes$is.fake[1:100] = 0
SwissBankNotes$is.fake = as.factor(SwissBankNotes$is.fake)
summary(SwissBankNotes)
my_cols = c("#3EBCC0","#F88179")
panel.cor <- function(x, y){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- round(cor(x, y), digits=2)
txt <- paste0("", r)
cex.cor <- 0.6/strwidth(txt)
text(0.5, 0.5, txt, cex = 3)
}
my_cols = c("#3EBCC0","#F88179")
upper.panel<-function(x, y){
points(x,y, pch = 19, col = my_cols[as.numeric(SwissBankNotes$is.fake)])
}
pairs(SwissBankNotes[,c(1:6)],
lower.panel = panel.cor,
upper.panel = upper.panel,cex.labels =1.8)
pcaNotes = prcomp(SwissBankNotes[,1:6])
pcaNotes
summary(pcaNotes)
currPCAData = pcaNotes$x[,1:2]
isFake = SwissBankNotes$is.fake
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of all notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
currPCAData = pcaNotes$x[1:100,1:2]
isFake = SwissBankNotes$is.fake[1:100]
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of genuine notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
currPCAData = pcaNotes$x[101:200,1:2]
isFake = SwissBankNotes$is.fake[101:200]
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of counterfeit notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
currPCAData = pcaNotes$x[,1:2]
isFake = SwissBankNotes$is.fake
plot(currPCAData,col=my_cols[as.numeric(isFake)], main="First two principal components of all notes")+
legend("topright", pch=c(1,1), col=my_cols, c("Not Fake","Fake"),  box.col="darkgreen", cex=.8)
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
rm(list = ls())
setwd("~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3")
load("./primate.scpulae.rdata")
library("cluster")
require("class")
summary(primate.scapulae)
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
primate.scapulae$gamma[is.na(primate.scapulae$gamma)] = 59.11
mean(primate.scapulae$gamma)
d = dist(primate.scapulae[1:9])
dim(as.matrix(d))
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "single")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
table(cutTreeDt,primate.scapulae$classdigit,title = "Single")
table(cutTreeDt,primate.scapulae$classdigit)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
hc = hclust(d, method = "single")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
km = kmeans(d,5)
table(km$cluster,primate.scapulae$classdigit)
d = dist(primate.scapulae[1:9])
dim(as.matrix(d))
hc = hclust(d, method = "complete")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "average")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
hc = hclust(d, method = "single")
plot(hc, hang = -1)
cutTreeDt =(cutree(hc, k = 5))
cutTreeDt
table(cutTreeDt,primate.scapulae$classdigit)
km = kmeans(d,5)
table(km$cluster,primate.scapulae$classdigit)
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
for(i in c(1:6)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(2,1,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
}
#Ignore the first record
simlarClust
rm(list = ls())
setwd("~/Documents/GitHub/STA546_SDM2/Assignment/Assignment 3")
library(phyclust)
library(kohonen)
library(ElemStatLearn)
library()
data(nci)
nciScaledData = scale(nci)
nciKm = kmeans(nciScaledData,2)
nciKm$cluster
nciSom <- som(X = as.matrix(nciScaledData), grid = somgrid(5,5,"hexagonal"))
somRadius = c(0.1,0.4,0.8,2,4,10)
kMeansK = c(2,5,10,20)
simlarClust = data.frame("kMeansK" = 0,"somRad" = 0,"similarity" = 0)
for(i in c(1:6)){
for(j in c(1:4)){
kmens = kmeans(nciScaledData,kMeansK[j])
nciSom = som(X = as.matrix(nciScaledData), grid = somgrid(2,1,"hexagonal"), radius =  somRadius[i] )
sim = RRand(kmens$cluster, nciSom$unit.classif)$Rand
simDf = data.frame("kMeansK" = kMeansK[j],"somRad" = somRadius[i],"similarity" = sim)
simlarClust = rbind(simlarClust,simDf)
}
}
simlarClust
View(simlarClust)
View(simlarClust)
